<?php

require_once '../Person.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-04-29 at 16:31:49.
 */
class PersonTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Person
     */
    protected $p;
    protected $person1;
    protected $person2;
    protected $person3;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        $this->p = new Person('', '', '', '', '');
        $this->person1 = new Person('mike smith', '29/04/95', 'mike@email.com', 'mike', 'pw1234');
        $this->person2 = new Person('bob jones', '29/04/95', 'bob@email.com', 'bob', 'pw1234');
        $this->person3 = new Person('jame2s clarke', '29/04/95', 'jamesemail.com', 'james', 'pw134');
        $this->person4 = new Person('cian mcateer', '29/04/95', '', 'cian', 'pw1234');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Person::getName
     * @todo   Implement testGetName().
     */
    public function testGetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::getDob
     * @todo   Implement testGetDob().
     */
    public function testGetDob() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::getEmail
     * @todo   Implement testGetEmail().
     */
    public function testGetEmail() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::getUsername
     * @todo   Implement testGetUsername().
     */
    public function testGetUsername() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::getPassword
     * @todo   Implement testGetPassword().
     */
    public function testGetPassword() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::setName
     * @todo   Implement testSetName().
     */
    public function testSetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::setDob
     * @todo   Implement testSetDob().
     */
    public function testSetDob() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::setEmail
     * @todo   Implement testSetEmail().
     */
    public function testSetEmail() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::setUsername
     * @todo   Implement testSetUsername().
     */
    public function testSetUsername() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::setPassword
     * @todo   Implement testSetPassword().
     */
    public function testSetPassword() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Person::duplicates
     * @todo   Implement testDuplicates().
     */
    public function testDuplicates() {

        $usernames = ['mike', 'frank', 'bobby', 'pete'];
        $emailaddresses = ['mikey@email.com', 'frank@email.com', 'bob@email.com', 'pete@email.com'];

        $dup1 = $this->p->duplicates($this->person1->username, $this->person1->email, $usernames, $emailaddresses);
        $this->assertSame($dup1[0], "Username is already taken");
        $this->assertNull($dup1[1]);

        $dup2 = $this->p->duplicates($this->person2->username, $this->person2->email, $usernames, $emailaddresses);
        $this->assertNull($dup2[0]);
        $this->assertEquals($dup2[1], "Email is already taken");

        $dup3 = $this->p->duplicates($this->person3->username, $this->person3->email, $usernames, $emailaddresses);
        $this->assertNull($dup3[0]);
        $this->assertNull($dup3[1]);
    }
    
    /**
     * @covers Person::validation
     * @todo   Implement testValidation().
     */
    public function testValidation() {
       
        $val1 = $this->p->validation($this->person1->name, $this->person1->email, $this->person1->password);
        $this->assertEquals($val1[0],'valid');
        $this->assertEquals($val1[1],'valid');
        $this->assertEquals($val1[2],'valid');
        
        $val2 = $this->p->validation($this->person3->name, $this->person3->email, $this->person3->password);        
        $this->assertEquals($val2[0],'invalid');
        $this->assertEquals($val2[1],'invalid');
        $this->assertEquals($val2[2],'invalid');
        
    }
    
    /**
     * @covers Person::capitalizeName()
     * @todo   Implement testCapitalizeName().
     */
    public function testCapitalizeName() {
        
        $name1 = $this->p->capitalizeName($this->person1->name);
        $this->assertEquals('Mike Smith', $name1);
        
        $name2 = $this->p->capitalizeName($this->person4->name);
        $this->assertEquals('Cian McAteer', $name2);
        
    }

}
